{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#obsidian-modal-form-plugin","title":"Obsidian Modal Form Plugin","text":"<p>This plugin for Obsidian allows you to define forms that can be opened from anywhere you can run JavaScript, so you can combine it with other plugins like Templater or QuickAdd.</p> <p>https://github.com/danielo515/obsidian-modal-form/assets/2270425/542974aa-c58b-4733-89ea-9c20ea11bee9</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Forms open in a modal window and return you the values, so you can trigger it from:<ul> <li>Templater templates</li> <li>QuickAdd captures</li> <li>DataviewJS queries</li> <li>Many other places...</li> </ul> </li> <li>Define forms using a simple JSON format</li> <li>Create and manage a collection of forms, each identified by a unique name</li> <li>User interface for creating new forms</li> <li>Create new notes directly from the form using templates<ul> <li>Template editor has a nice UI for creating templates</li> </ul> </li> <li>Many input types<ul> <li>number</li> <li>date</li> <li>time</li> <li>slider</li> <li>toggle (true/false)</li> <li>free text</li> <li>text with autocompletion for note names (from a folder or root)</li> <li>text with autocompletion from a dataview query (requires dataview plugin)</li> <li>multiple choice input</li> <li>select from a list<ul> <li>list of fixed values</li> <li>list of notes from a folder</li> </ul> </li> </ul> </li> </ul>"},{"location":"#why-this-plugin","title":"Why this plugin?","text":"<p>Obsidian is a great tool for taking notes, but it is also a nice for managing data. However, when it's time to capture structured data it doesn't offer many conveniences. Some plugins like Templater or QuickAdd alleviate this problem with templates/automation that ease the creation of notes with a predefined structure, but then you have to fill the data manually. The mentioned plugins (Templater, QuickAdd) have some little convenience inputs, but they have certain tradeoffs/problems:</p> <ul> <li>they are limited to inputting a single value at a time</li> <li>they don't have labels or detailed descriptions about the field you are filling</li> <li>you can't skip fields, you will always be prompted for all of them one by one</li> </ul> <p>All of the mentioned tools are great at their job and unleash super convenient workflows. For that reason, rather than offering an alternative, this plugin is designed as a complement to them, offering some basic building blocks that you can integrate with your existing templates and workflows.</p>"},{"location":"#friends-of-modal-form","title":"Friends of modal form","text":"<ul> <li>Templater to open modals from templates</li> <li>QuickAdd to quickly capture data from a modal</li> <li>dataview to provide values for auto-completion</li> </ul>"},{"location":"#scope-of-this-plugin","title":"Scope of this plugin","text":"<p>This plugin is intentionally narrow in scope. As mentioned in the previous section, it is designed as a building block, so you can integrate it with other plugins and workflows. The only features that I will consider adding will be ones about improving the form itself.</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#call-the-form-from-javascript","title":"Call the form from JavaScript","text":"<p>Since the main usage of this plugin is opening forms and getting back their data let's start with that. If you want to learn how to create forms, skip to the next section define a form.</p> <p>The plugin exposes an API that can be accessed from any JavaScript code that has access to the global <code>app</code> object. So, in order to get the API you can do:</p> <pre><code>const modalForm = app.plugins.plugins.modalforms.api;\n</code></pre> <p>From here you can call any of the main methods of the API, <code>openForm</code> which allows you to open a form by name and get back the data. Let's see an example:</p> <pre><code>const modalForm = app.plugins.plugins.modalforms.api;\nconst result = await modalForm.openForm(\"example-form\");\n</code></pre> <p>The result is a special type of object that contains the data of the form. It also has some convenient methods to help you process the returned data. One of them is <code>asFrontmatterString</code>, which returns the data as a string that can be used in a frontmatter block. Let's see an example using Templater:</p>"},{"location":"#usage-with-templater","title":"Usage with Templater","text":"<pre><code>---\n&lt;%*\nconst modalForm = app.plugins.plugins.modalforms.api;\nconst result = await modalForm.openForm('example-form');\ntR += result.asFrontmatterString();\n-%&gt;\n---\n</code></pre> <p>When you insert this template in a note, it will open the form, and once you submit it, it will insert the data in the note as a frontmatter block.</p>"},{"location":"#usage-with-quickadd","title":"Usage with QuickAdd","text":"<p>In order to open a form from QuickAdd capture, you need to create a capture and activate the capture format, then in the format text-area you must create a code block with the language defined as <code>js quickadd</code> and copy the code below:</p> <pre><code>```js quickadd\n    const modalForm = app.plugins.plugins.modalforms.api;\n    const result = await modalForm.openForm('example-form');\n    return result.asDataviewProperties();\n```\n</code></pre> <p>Here you have an example screenshot of how it should look like: </p>"},{"location":"#providing-default-values-when-opening-a-form","title":"Providing Default Values When Opening a Form","text":"<p>When opening a form you can provide default values for the form fields. This can be done by passing an object to the <code>openForm</code> or <code>limitedForm</code> methods as part of the <code>FormOptions</code> parameter. This object should have the same structure as the form definition, with each key corresponding to a field name and its value being the default value for that field.</p> <p>Here's an example:</p> <pre><code>const values = {\n    title: \"My Default Title\",\n    description: \"This is a default description.\",\n};\n\nconst modalForm = app.plugins.plugins.modalforms.api;\nconst result = await modalForm.openForm(\"example-form\", { values: values });\n</code></pre> <p>In this example, the form will open with the <code>title</code> field pre-filled with <code>My Default Title</code> and the <code>description</code> field pre-filled with <code>This is a default description.</code>.</p> <p>Note: If a field in the default values object does not exist in the form definition, it will be ignored.</p>"},{"location":"#formresult-methods","title":"FormResult Methods","text":"<p>When you open a form, you get back a <code>FormResult</code> object. This object contains the data of the form and some methods to help you process it. This <code>FormResult</code> object returned by the <code>openForm</code> method has several methods that can be used to process the form data. Here is a brief description of each method:</p>"},{"location":"#asfrontmatterstring","title":"asFrontmatterString()","text":"<p>This method returns the form data as a string that can be used in a frontmatter block. It formats the data in YAML syntax. Here is an example of how to use it:</p>"},{"location":"#asdataviewproperties","title":"asDataviewProperties()","text":"<p>This method returns the form data as a string of dataview properties. Each key-value pair in the form data is converted into a string in the format <code>key:: value</code>. Here is an example of how to use it:</p>"},{"location":"#getdata","title":"getData()","text":"<p>This method returns a copy of the form data. It can be used when you need to manipulate the form data without affecting the original data.</p>"},{"location":"#asstringtemplate-string","title":"asString(template: string)","text":"<p>This method returns the form data formatted as a string matching the provided template. The template is a string that can contain placeholders in the format <code>{{key}}</code>, which will be replaced with the corresponding value from the form data. Here is an example of how to use it in a templater template:</p> <pre><code>&lt;%*\nconst modalForm = app.plugins.plugins.modalforms.api;\nconst result = await modalForm.openForm('example-form');\ntR += result.asString('{{Name}} is {{age}} years old and his/her favorite food is {{favorite_meal}}. Family status: {{is_family}}');\n-%&gt;\n</code></pre>"},{"location":"#advanced-usage","title":"Advanced usage","text":"<p>For more advanced usage of the <code>FormResult</code> methods please refer to the specific documentation of FormResult here</p>"},{"location":"#define-a-form","title":"Define a form","text":""},{"location":"#create-a-new-form","title":"Create a new form","text":"<p>Creating a new form is easy, you just need to open the manage forms view, either by clicking on the ribbon icon or by using the command palette (<code>Obsidian modal form: New form</code>). Once there, click on the <code>+</code> button and you will be presented with a form to create a named form definition. The form is self-explanatory, but here are some key points you need to keep in mind:</p> <ul> <li>The name must be unique, and it will be used to identify the form when you open it from JavaScript, case-sensitive</li> <li>The title is what you will see as a header in the modal window when you open the form</li> <li>You will not be able to save the form unless all the fields are valid (which means they have a name and a type)</li> </ul> <p></p>"},{"location":"#dataview-integration","title":"Dataview integration","text":""},{"location":"#inline-forms","title":"Inline forms","text":"<p>The plugin also supports inline forms, which are forms that are defined when you call the openForm method. This is useful when you want to create a form that is only used in one place and it is simple enough. However, note the format is a bit verbose for typing it manually and it is error-prone, so unless it is a very small form, you will most likely prefer to use a named form.</p> <p>Here is an example of how to use it:</p> <pre><code>const modalForm = app.plugins.plugins.modalforms.api;\nconst result = await modalForm.openForm({\n    title: \"Example form\",\n    fields: [\n        {\n            name: \"name\",\n            label: \"Name\",\n            description: \"Your name\",\n            input: { type: \"text\" },\n        },\n        {\n            name: \"age\",\n            label: \"Age\",\n            description: \"Your age\",\n            input: { type: \"number\" },\n        },\n        {\n            name: \"favorite_meal\",\n            label: \"Favorite meal\",\n            description: \"Your favorite meal\",\n            input: { type: \"text\" },\n        },\n        {\n            name: \"is_family\",\n            label: \"Is family\",\n            type: \"toggle\",\n            description: \"Are you family?\",\n            required: true,\n            input: { type: \"toggle\" },\n        },\n    ],\n});\n</code></pre> <p>You can make it smaller by removing some of the optional fields like description or label, but I really encourage you to define them all.</p>"},{"location":"#tips-and-tricks","title":"Tips and tricks","text":"<ul> <li>How to make opening the forms more convenient</li> </ul>"},{"location":"#installing-the-plugin","title":"Installing the plugin","text":"<p>You can install the plugin directly from the Obsidian plugin store or through BRAT</p>"},{"location":"#installing-with-brat","title":"Installing with BRAT","text":"<ol> <li>Install the BRAT plugin (GitHub page) and enable it.</li> <li>Open the command palette and run the command BRAT: Add a beta plugin for testing.</li> <li>Enter <code>https://github.com/danielo515/obsidian-modal-form</code> into the modal and press the Add Plugin button.</li> <li>Return to the settings and navigate to the Community plugins tab.</li> <li>Enable the plugin.</li> </ol>"},{"location":"#manually-installing-the-plugin","title":"Manually installing the plugin","text":"<ul> <li>Copy over <code>main.js</code>, <code>styles.css</code>, <code>manifest.json</code> to your vault <code>VaultFolder/.obsidian/plugins/modalForm/</code>.</li> </ul>"},{"location":"#how-to-develop","title":"How to develop","text":"<ul> <li>Clone this repo.</li> <li>Make sure your NodeJS is at least v16 (<code>node --version</code>).</li> <li><code>npm i</code> or <code>yarn</code> to install dependencies.</li> <li><code>npm run dev</code> to start compilation in watch mode.</li> </ul>"},{"location":"#releasing-new-releases","title":"Releasing new releases","text":"<ul> <li>run <code>npm version patch</code>, <code>npm version minor</code>, or <code>npm version major</code> after updating <code>minAppVersion</code> manually in <code>manifest.json</code>.</li> <li>Upload the files <code>manifest.json</code>, <code>main.js</code>, <code>styles.css</code> as binary attachments. Note: The manifest.json file must be in two places, first the root path of your repository and also in the release.</li> <li>Publish the release.</li> </ul> <p>The command <code>npm version whatever</code> will bump version in <code>manifest.json</code> and <code>package.json</code>, and add the entry for the new version to <code>versions.json</code></p>"},{"location":"#publish-docs","title":"Publish docs","text":"<p>We use mkdocs to generate the documentation. To publish the docs, run:</p> <pre><code>mkdocs build\nmkdocs gh-deploy\n</code></pre>"},{"location":"ResultValue/","title":"ResultValue","text":"<p>This class is a helper wrapper for values coming from a form Result. It provides a safer and convenient interface to render the contained value in various formats.  The main purpose is to avoid the need to check for null or undefined values while having a convenient interface to print the value in a template.</p>"},{"location":"ResultValue/#usage","title":"Usage","text":"<p>All the following examples assume that the form has been opened with the following templater code:</p> <pre><code>&lt;%* const result = await forms.openForm('myForm'); %&gt;\n</code></pre>"},{"location":"ResultValue/#renderprinting-as-string","title":"Render/printing as string","text":"<p>By default, the value is rendered as a string. If the value is null or undefined, an empty string is returned. You don't need to call or do anything special to render the value as a string, just use it as if it was a string.</p> <pre><code>&lt;% result.getValue('firstField') %&gt;\n</code></pre> <p>if the value of the field is \"Hello World\", the above code will print \"Hello World\" in the resulting note. However, if the value is null or undefined, nothing will be printed.</p>"},{"location":"ResultValue/#renderprinting-as-bullet-list","title":"Render/printing as bullet list","text":"<p>You can render any value as a bullet list by using the <code>toBulletList()</code> method. If the value is an array, each element of the array will be printed as a bullet point. If the value is a primitive, like a number or a string, it will be printed as a single bullet point. If the value is null or undefined, an empty string is printed.</p> <pre><code>&lt;% result.getValue('listField').toBulletList() %&gt;\n</code></pre> <p>You can also use a shorthand for this method by using the <code>bullets</code> property:</p> <pre><code>&lt;% result.getValue('listField').bullets %&gt;\n</code></pre> <p>The above code is equivalent to the previous one.</p> <p>If the value of the field is <code>[\"Hello\", \"World\"]</code>, the above code will print:</p> <pre><code>- Hello\n- World\n</code></pre>"},{"location":"ResultValue/#renderprinting-as-dataview-field","title":"Render/printing as dataview field","text":"<p>You can render any value as a dataview field by using the <code>toDataviewField()</code> method or the shorthand <code>toDv()</code> alias.</p> <p>List values are rendered as a dataview list field, while primitive values are just rendered as a dataview field.</p> <pre><code>&lt;% result.getValue('listField').toDataviewField() %&gt;\nOr alias:\n&lt;% result.getValue('listField').toDv() %&gt;\n</code></pre> <p>if the value of the field is <code>[\"Hello\", \"World\"]</code>, the above code will print:</p> <pre><code>[listField:: \"Hello\", \"World\"]\n</code></pre> <p>If the value were a primitive, like the string \"Hello World\", the above code would print:</p> <pre><code>[listField:: Hello World]\n</code></pre>"},{"location":"ResultValue/#mapfn-value-any-any-resultvalue-method","title":"<code>map(fn: (value: any) =&gt; any): ResultValue</code> method","text":"<p>The map method is a powerful one that allows you to transform the value contained in the ResultValue object without extracting it, allowing you to chain multiple transformations.</p> <pre><code>&lt;% result.getValue('listField').map((value) =&gt; value.toUpperCase()).bullets %&gt;\n</code></pre> <p>The above code will print the list field as a bullet list, but all the values will be uppercased.</p> <p>The map method takes a function that takes the value and returns a new value. It can be used when none of the provided printing are enough for your use case, or when one of them is almost what you need but you need to transform the value a bit more.</p>"},{"location":"ResultValue/#trimmedlowerupper-shortcuts","title":"<code>trimmed</code>,<code>lower</code>,<code>upper</code> shortcuts","text":"<p>The ResultValue class provides some shortcuts to common transformations of the value. They are:  - <code>trimmed</code>: Trims the value, removing any leading or trailing whitespace.  - <code>lower</code>: Converts the value to lowercase.  - <code>upper</code>: Converts the value to uppercase.</p> <p>All of these shortcuts return a new ResultValue object, so you can chain them with other methods.</p> <pre><code>&lt;% result.getValue('listField').trimmed.upper.bullets %&gt;\n</code></pre> <p>The above code will print the list field as a bullet list, but all the values will be uppercased and trimmed. You can chain as many or as little as you want. The most common use is probably just to use one of them, like <code>trimmed</code> or <code>upper</code>.</p> <pre><code>&lt;% result.getValue('myField').trimmed %&gt;\n</code></pre> <p>All of this shortcuts are able to handle single values and lists, so you can use them with any value.</p>"},{"location":"advanced-examples/","title":"Advanced usage examples","text":"<p>In this section of the docs you will find some advanced usage examples of modal-form-plugin</p>"},{"location":"advanced-examples/#nesting-form-calls","title":"Nesting form calls","text":""},{"location":"advanced-examples/#modifying-frontmatter-with-a-form","title":"Modifying frontmatter with a form","text":"<p>If you want to modify the content of a notes frontmatter with one of your existing forms, put the following snippet in a templater template, substituting the name of your form:</p> <pre><code>&lt;%*\n  const run = async (frontmatter) =&gt; {\n    const result = await tp.user.openForm('frontmatter', {\n      values: { ...frontmatter },\n    });\n    return result.getData();\n  };\n  //first we get the data from the form\n  const data = await run(tp.frontmatter);\n // Then we update the frontmatter with the new data\n  app.fileManager.processFrontMatter(\n    tp.config.target_file,\n    frontmatter =&gt; {\n      Object.assign(frontmatter, data);\n    },\n  );\n%&gt;\n\nPlease be aware that this is not atomic, so if if something edits the frontmatter while you are editing it within the form,\nthe form values will not reflect this change and you may be overwriting some changes. Although this is unlikely to happen, it is better to be aware of it.\n</code></pre> <p>The values the form understand and that are pressent in the frontmatter, will be populated with the values on the frontmatter. Then, when you submit the form, the new values will overwrite the old ones, leaving the rest untouched.</p>"},{"location":"advanced-examples/#making-calling-forms-more-convenient","title":"Making calling forms more convenient","text":"<p>If you are using templater, you can make calling forms more convenient by using the following snippet:</p> <pre><code>const modalForm = app.plugins.plugins.modalforms.api;\nmodule.exports = (formName, options) =&gt; modalForm.openForm(formName, options);\n</code></pre> <p>If you save this snippet as <code>openForm.js</code> in your templater snippets folder, then you can then call it like this from templater:</p> <pre><code>&lt;%*\nconst result = await tp.user.openForm('example-form', { values: { size: 'large' }});\n%&gt;\n</code></pre>"},{"location":"advanced-examples/#exclude-subfolders-when-selecting-notes-from-a-folder","title":"Exclude subfolders when selecting notes from a folder","text":"<p>Instead of using the <code>note</code> type or the <code>note</code> source (in case of multi-select) in your form, which doesn't support exclusions yet, we will use <code>dataview</code> (either type or as a multi-select source) to get the notes we want. Then use the following query to exclude subfolders:</p> <pre><code>dv.pages('\"Data\" AND -\"Data/Nested\"').file.name\n</code></pre> <p>Here <code>Data</code> is the folder we want to get notes from and <code>Data/Nested</code> is the subfolder we want to exclude. Please keep in mind that <code>dataview</code> is very sensitive to spaces and quotes. Removing the nested <code>\"</code> will not work, or adding a space after the <code>-</code> will not work either.</p>"},{"location":"managing-results/","title":"Managing Results","text":"<p>The <code>FormResult</code> class provides methods for accessing and formatting form results.</p> <p>[!TIP] From version <code>1.33.0</code> onwards, the <code>FormResult</code> class allows accessing the values of the form fields  using directly <code>property accessors</code>, like <code>result.title</code> or <code>result.listField</code>. The property accessors are equivalent to calling the <code>get</code> method, so <code>result.title</code> is equivalent to <code>result.get('title')</code>, but it's shorter and more convenient. All the examples in this page continue to use the more explicit ways to access the values, but you can use the property accessors if you prefer.</p> <p>[!IMPORTANT] Accessing the values using <code>property accessors</code> or the <code>getValue</code> method is considered the safer and preferred way to access the values. This is because the returned values are wrapped in a <code>ResultValue</code> object that provides a safer and more convenient interface to render the values in various formats.</p>"},{"location":"managing-results/#asfrontmatterstringoptions-unknown-string","title":"<code>asFrontmatterString(options?: unknown): string</code>","text":"<p>Transforms the current data into a frontmatter string, which is expected to be enclosed in <code>---</code> when used in a markdown file. This method does not add the enclosing <code>---</code> to the string, so you can put it anywhere inside the frontmatter.</p>"},{"location":"managing-results/#parameters","title":"Parameters","text":"<ul> <li> <p><code>options</code> (optional): An options object describing what options to pick or omit.</p> <ul> <li><code>pick</code> (optional): An array of key names to pick from the data.</li> <li><code>omit</code> (optional): An array of key names to omit from the data.</li> </ul> </li> </ul>"},{"location":"managing-results/#returns","title":"Returns","text":"<ul> <li><code>string</code>: The data formatted as a frontmatter string.</li> </ul>"},{"location":"managing-results/#example","title":"Example","text":"<pre><code>const result = await form.openForm(\"my-form\");\ntR += result.asFrontmatterString({ pick: [\"title\"] });\n</code></pre>"},{"location":"managing-results/#aliases","title":"Aliases","text":"<p>this method has the following aliases:</p> <ul> <li><code>asFrontmatter</code></li> <li><code>asYaml</code></li> </ul>"},{"location":"managing-results/#asdataviewpropertiesoptions-unknown-string","title":"<code>asDataviewProperties(options?: unknown): string</code>","text":"<p>Returns the current data as a block of dataview properties.</p>"},{"location":"managing-results/#parameters_1","title":"Parameters","text":"<ul> <li> <p><code>options</code> (optional): An options object describing what options to pick or omit.</p> <ul> <li><code>pick</code> (optional): An array of key names to pick from the data.</li> <li><code>omit</code> (optional): An array of key names to omit from the data.</li> </ul> </li> </ul>"},{"location":"managing-results/#returns_1","title":"Returns","text":"<ul> <li><code>string</code>: The data formatted as a block of dataview properties.</li> </ul>"},{"location":"managing-results/#example_1","title":"Example","text":"<pre><code>const result = await form.openForm('my-form')\ntR += result.asDataviewProperties({ pick: ['title'] });`\n</code></pre>"},{"location":"managing-results/#aliases_1","title":"Aliases","text":"<p>This method has the following aliases:</p> <ul> <li><code>asDataview</code></li> <li><code>asDv</code></li> </ul>"},{"location":"managing-results/#getkey-string-mapfn-value-any-any-any","title":"<code>get(key: string, mapFn?: (value: any) =&gt; any): any</code>","text":"<p>Returns the value of the given key. If the key does not exist, returns the empty string <code>\"\"</code>. It takes an optional map function that can be used to transform the value. If the key does not exist, the map function is not called.</p>"},{"location":"managing-results/#parameters_2","title":"Parameters","text":"<ul> <li><code>key</code>: The key to get the value of.</li> <li><code>mapFn</code> (optional): A function that takes the value and returns a new value.</li> </ul>"},{"location":"managing-results/#returns_2","title":"Returns","text":"<ul> <li><code>any</code>: The value of the given key.</li> </ul>"},{"location":"managing-results/#example_2","title":"Example","text":"<pre><code>const result = await form.openForm(\"my-form\");\ntR += result.get(\"title\");\n</code></pre> <p>Or with a map function:</p> <pre><code>const result = await form.openForm(\"my-form\");\ntR += result.get(\"title\", (value) =&gt; value.toUpperCase());\n</code></pre>"},{"location":"managing-results/#getvaluekey-string-resultvalue-or-getvkey-string-resultvalue","title":"<code>getValue(key: string): ResultValue</code> or <code>getV(key: string): ResultValue</code>","text":"<p>Returns the value of the given key as a <code>ResultValue</code> object.</p>"},{"location":"managing-results/#parameters_3","title":"Parameters","text":"<ul> <li><code>key</code>: The key to get the value of.</li> </ul>"},{"location":"managing-results/#returns_3","title":"Returns","text":"<ul> <li><code>ResultValue</code>: The value of the given key as a <code>ResultValue</code> object.  If the key field doesn't exist or is empty, returns an empty <code>ResultValue</code> object. Thanks to this, you don't need to check if the field exists or is empty because the <code>ResultValue</code> object will handle it for you.</li> </ul>"},{"location":"managing-results/#example_3","title":"Example","text":"<pre><code>const result = await form.openForm(\"my-form\");\ntR += result.getValue(\"title\");\ntR += result.getValue(\"listField\").bullets;\n</code></pre> <p>Thanks to <code>property accessors</code>, you can also write the above code in a more convenient way like this:</p> <pre><code>const result = await form.openForm(\"my-form\");\ntR += result.title;\ntR += result.listField.bullets;\n</code></pre> <p>For more details and examples, see the <code>ResultValue</code> documentation.</p>"}]}